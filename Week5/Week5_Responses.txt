Week #3 -

-------------------------------------------------------------------Statement of where project stands:
	This week, I needed to go back and fix the functionality for the canyon width and slider length. I misunderstood the project parameters and needed to correct this. In addition to correcting the canyon length and slider length functionality, I was able to create the physics for the falling Holtzman masses. Thus far, the game is close to being complete, but I still need to run the final versions of my task cutting points on my unit tests to confirm they work. I also still need to complete the LED functionality as well as clarify a few details about the LED light requirements. Thus, with a week and a half left till the project is due, I am confident I can complete all the requirements with the exception of the auto control feature for the slider.
	
-------------------------------------------------------------------Summary effort and estimate numbers:
I completed around 70% of the project timeline so far in about 24 hours. This required about 1.52x more time than initially expected. As my project stands, it functions correctly from a gameplay standpoint with the default parameters I derived. I am worried that my unit tests may not produce the exact output and I need to spend some time understanding the game version parameter functionality that is being emphasized. At the moment, the only way to change the game paramters is by manually changing a set of define statments at the top of my project.

complete - Task diagram - 2 hours, estimated 2 hours
	
complete - Gather Relevant Physics Equations- 1 hour, estimated 2 hours
	
complete - Learn how to further display geometry and physics on LCD screen - 3 hours, estimated 2 hours

complete - Implement Slider Shield Task - completed in 4 hours, estimated 2 hours.

complete - Test Shield Task Produces Desired Output - 1 hour, estimated 1 hour

complete - Implement Slider Physics Task - 2 hours, estimated 2 hours

complete - Test Physics Task Produces Desired Output - 1 hour, estimated 1 hour

complete - Implement Physics Engine - 4 hours, estimated 1 hour

complete - Test Physics Task Produces Desired Output - 2 hours, estimated 1 hour

complete - Implement Holtzman mass physics, create geometry for holtzman mass - 6 hours, estimated 3 hours

Understand LED output task - estimate 1 hour
Implement LED Output Task - estimte 1 hour
Test LED Task Produces Desired Output - estimate 2 hours
create way to automatically process game version parameter structs - 2 hours
Test different parameter versions for project - estimate 4 hours


Completed Time: 26 hours
Estimate Time Left: 10 hours
Total Time: 36 hours
	

----------------------------------------------------------------------Functional Tests 
Here are the unit tests I have implemented. I will add more once I understand what I'm missing after I complete the corresponding functions. Theses tests are also in unittests.c of included test file.
//Ensure right side of capsense slider initiaties correct velocity direction and max force.
CTEST2(cutpointtests, test_process_1){
    struct game_platform test;
    test = slider_force_task(4.0, 3.0, 0);
    ASSERT_EQUAL(4.0, test.max_force);
    ASSERT_EQUAL(3.0, test.velocity);
}
//Ensure friction decreases velocity when platform is moving to the right of the screen.
CTEST2(cutpointtests, test_process_2){
    struct game_platform test;
    test = slider_force_task(0.0, 4.0, 2);
    ASSERT_EQUAL(3.6, test.velocity);
    ASSERT_EQUAL(0, test.max_force);
}
//Ensure left side of capsense slider initiaties correct velocity direction and max force.
CTEST2(cutpointtests, test_process_3){
    struct game_platform test;
    test = slider_force_task(5.0, 2.0, 1);
    ASSERT_EQUAL(-5.0, test.velocity);
    ASSERT_EQUAL(2.0, test.max_force);
}
//Ensure friction decreases velocity even when no direction and force are present.
CTEST2(cutpointtests, test_process_4){
    struct game_platform test;
    test = slider_force_task(0.0, 10, 0);
    ASSERT_EQUAL(8, test.velocity);
}
//ensure kinematic equations are correct.
CTEST2(cutpointtests, test_process_5){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test = physics_task(test);
    ASSERT_EQUAL(4.06, test.velocity);
    ASSERT_EQUAL(0.406, test.position);
}
//ensure platoform stops at right cayon wall when bounce is not enabled.
CTEST2(cutpointtests, test_process_6){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 0;
    test.least_position = 8;
    test.most_position = 16;
    test = physics_task(test);
    ASSERT_EQUAL(4.06, test.velocity);
    ASSERT_EQUAL(8, test.position);
}
//ensure platoform stops at left canyon wall when bounce is not enabled.
CTEST2(cutpointtests, test_process_7){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 36;
    test.least_position = 8;
    test.most_position = 16;
    test = physics_task(test);
    ASSERT_EQUAL(4.06, test.velocity);
    ASSERT_EQUAL(16, test.position);
}
//ensure platoform bounces off left canyon wall when bounce is enabled
CTEST2(cutpointtests, test_process_8){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 0;
    test.least_position = 8;
    test.most_position = 16;
    test = physics_task(test);
    ASSERT_EQUAL(4.06, test.velocity);
    ASSERT_EQUAL(8.4, test.position);
}
//ensure platform bounces off right canyon wall
CTEST2(cutpointtests, test_process_9){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 36;
    test.least_position = 8;
    test.most_position = 16;
    test = physics_task(test);
    ASSERT_EQUAL(-4.06, test.velocity);
    ASSERT_EQUAL(15.6, test.position);
}
//ensure platoform is destroyed when above max velocity.
CTEST2(cutpointtests, test_process_10){
    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 36;
    test.least_position = 8;
    test.most_position = 16;
    test.max_speed = 4;
    test.destroyed = false;
    test = physics_task(test);
    ASSERT_EQUAL(-4.06, test.velocity);
    ASSERT_EQUAL(16, test.position);
    ASSERT_EQUAL(true, test.destroyed);

    struct game_platform test;
    test.mass = 3.0;
    test.max_force = 2.0;
    test.timer_update = 0.1;
    test.velocity = 4;
    test.position = 0;
    test.least_position = 8;
    test.most_position = 16;
    test.max_speed = 4;
    test.destroyed = false;
    test = physics_task(test);
    ASSERT_EQUAL(4.06, test.velocity);
    ASSERT_EQUAL(8.4, test.position);
    ASSERT_EQUAL(4, test.max_speed);
    ASSERT_EQUAL(true, test.destroyed);
}
	
	



